knitr::opts_chunk$set(echo = TRUE)
set.seed(01)   # set seed
nrofcondsf1 = 3  # set number of conditions for factor 1
nrofcondsf2 = 2  # set number of conditions for factor 2
nrofsubs    = nrofcondsf1*nrofcondsf2*30 # set number of subjects per condition
subj = as.factor(1:(nrofsubs))      # create array with subject IDs
# create array witht treatment conditions
treatment = as.factor(rep(LETTERS[1:nrofcondsf1],each=nrofsubs/nrofcondsf1))
# create array with control / experimental
control   = as.factor(rep(c("control","experimental"),times=nrofsubs/nrofcondsf2))
# create array with measurement values
score = as.vector( replicate(nrofcondsf1, replicate (
nrofcondsf2 , rnorm(
n = (nrofsubs/(nrofcondsf1*nrofcondsf2)),
mean = 0 , sd = sample(5,1) ) + sample(8,1)+10
) ) )
# combine arrays into a data.frame
data.long = data.frame(subj, score, treatment, control);
# delete unnecessary arrays
rm(list=c("control","nrofcondsf1","nrofcondsf2","nrofsubs","score","subj","treatment"))
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
geom_bar     ( stat = "summary", fun.y    = "mean" , position = "dodge") +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3,
position = position_dodge(width=.9) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
library(ggplot2)
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
geom_bar     ( stat = "summary", fun.y    = "mean" , position = "dodge") +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3,
position = position_dodge(width=.9) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
stat_summary ( geom = "bar", fun    = "mean" , position = "dodge")  +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3,
position = position_dodge(width=.9) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
stat_summary ( geom = "bar", fun    = "mean" , position = "dodge")  +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3,
position = position_dodge(width=.9) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
stat_summary ( geom = "bar", fun    = "mean" , position = "dodge")  +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3,
position = position_dodge(width=.9) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
stat_summary ( geom = "bar", fun    = "mean" , position = "dodge")  +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3,
position = position_dodge(width=.9) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
set.seed(01)   # set seed
nrofcondsf1 = 3  # set number of conditions for factor 1
nrofcondsf2 = 2  # set number of conditions for factor 2
nrofsubs    = nrofcondsf1*nrofcondsf2*30 # set number of subjects per condition
subj = as.factor(1:(nrofsubs))      # create array with subject IDs
# create array witht treatment conditions
treatment = as.factor(rep(LETTERS[1:nrofcondsf1],each=nrofsubs/nrofcondsf1))
# create array with control / experimental
control   = as.factor(rep(c("control","experimental"),times=nrofsubs/nrofcondsf2))
# create array with measurement values
score = as.vector( replicate(nrofcondsf1, replicate (
nrofcondsf2 , rnorm(
n = (nrofsubs/(nrofcondsf1*nrofcondsf2)),
mean = 0 , sd = sample(5,1) ) + sample(8,1)+10
) ) )
# combine arrays into a data.frame
data.long = data.frame(subj, score, treatment, control);
# delete unnecessary arrays
rm(list=c("control","nrofcondsf1","nrofcondsf2","nrofsubs","score","subj","treatment"))
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
geom_bar     ( stat = "summary", fun.y    = "mean" , position = "dodge") +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3,
position = position_dodge(width=.9) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
geom_bar     ( stat = "summary", fun.y    = "mean" , position = "dodge") +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3,
position = position_dodge(width=.9) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
stat_summary ( geom = "bar", fun    = "mean" , position = "dodge")  +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3,
position = position_dodge(width=.9) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
ggplot(data.long, aes(x=cond, y=score, fill=cond) ) +
stat_summary ( geom = "bar", fun    = "mean" , position = "dodge")  +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3 ) +
geom_point   ( position=position_jitter(width = .1) )
ggplot(data.long, aes(x=cond, y=score, fill=cond) ) +
stat_summary ( geom = "bar", fun    = "mean" ) +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3 ) +
geom_point   ( position=position_jitter(width = .1) )
ggplot(data.long, aes(x=cond, y=score, fill=cond) ) +
stat_summary   ( geom = "bar", fun    = "mean" ) +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3 ) +
geom_point   ( position=position_jitter(width = .1) )
set.seed(05)   # set seed
nrofconds = 3  # set number of conditions
nrofsubs  = 20 # set number of subjects
subj = as.factor(1:(nrofsubs*nrofconds))      # create array with subject IDs
cond = as.factor(rep(LETTERS[1:nrofconds],each=nrofsubs))   # create array with condition values
score = as.vector( replicate(
nrofconds , rnorm(n = nrofsubs, mean = sample(8,1)+10 , sd = sample(5,1) )
) )                                     # create array with measurement values
data.long = data.frame(subj, cond, score);      # combine arrays into a data.frame
rm(list=setdiff(ls(), c("data.long", "nrofsubs","nrofconds"))) # delete arrays
ggplot(data.long, aes(x=cond, y=score, fill=cond) ) +
stat_summary   ( geom = "bar", fun    = "mean" ) +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3 ) +
geom_point   ( position=position_jitter(width = .1) )
ggplot(data.long, aes(x=cond, y=score, fill=cond) ) +
stat_summary ( geom = "bar", fun    = "mean" , position = "dodge")  +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3 ) +
geom_point   ( position=position_jitter(width = .1) )
set.seed(01)   # set seed
nrofcondsf1 = 3  # set number of conditions for factor 1
nrofcondsf2 = 2  # set number of conditions for factor 2
nrofsubs    = nrofcondsf1*nrofcondsf2*30 # set number of subjects per condition
subj = as.factor(1:(nrofsubs))      # create array with subject IDs
# create array witht treatment conditions
treatment = as.factor(rep(LETTERS[1:nrofcondsf1],each=nrofsubs/nrofcondsf1))
# create array with control / experimental
control   = as.factor(rep(c("control","experimental"),times=nrofsubs/nrofcondsf2))
# create array with measurement values
score = as.vector( replicate(nrofcondsf1, replicate (
nrofcondsf2 , rnorm(
n = (nrofsubs/(nrofcondsf1*nrofcondsf2)),
mean = 0 , sd = sample(5,1) ) + sample(8,1)+10
) ) )
# combine arrays into a data.frame
data.long = data.frame(subj, score, treatment, control);
# delete unnecessary arrays
rm(list=c("control","nrofcondsf1","nrofcondsf2","nrofsubs","score","subj","treatment"))
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
geom_bar     ( stat = "summary", fun.y    = "mean" , position = "dodge") +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3,
position = position_dodge(width=.9) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
stat_summary ( geom = "bar", fun    = "mean" , position = "dodge")  +
geom_errorbar( stat = "summary", fun.data = "mean_se", fun.args = 2, width = 0.3,
position = position_dodge(width=.9) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
set.seed(01)   # set seed
nrofcondsf1 = 3  # set number of conditions for factor 1
nrofcondsf2 = 2  # set number of conditions for factor 2
nrofsubs    = nrofcondsf1*nrofcondsf2*20 # set number of subjects per condition
subj = as.factor(1:(nrofsubs))      # create array with subject IDs
# create array witht treatment conditions
treatment = as.factor(rep(LETTERS[1:nrofcondsf1],each=nrofsubs/nrofcondsf1))
# create array with control / experimental
control   = as.factor(rep(c("control","experimental"),times=nrofsubs/nrofcondsf2))
# create array with measurement values
score = as.vector( replicate(nrofcondsf1, replicate (
nrofcondsf2 , rchisq(
n = (nrofsubs/(nrofcondsf1*nrofcondsf2)),
df = 3)
)+  sample(14,1)+10  ) )
# combine arrays into a data.frame
data.long = data.frame(subj, score, treatment, control);
# delete unnecessary arrays
rm(list=c("control","nrofcondsf1","nrofcondsf2","nrofsubs","score","subj","treatment"))
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
geom_boxplot (outlier.shape = NA) +
stat_boxplot(geom="errorbar", width=.3, position = position_dodge(.75) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
ggplot(data.long, aes(x=treatment, y=score, fill=control) ) +
geom_boxplot (outlier.shape = NA) +
stat_boxplot(geom="errorbar", width=.3, position = position_dodge(.75) ) +
geom_point  ( position = position_jitterdodge(jitter.width = .2) )
# Generate dataset
set.seed(01)   # set seed
nrofsubs  = 20 # set number of subjects
nrofconds = 3  # set number of conditions
subj = as.factor(rep(1:nrofsubs,nrofconds))      # create array with subject IDs
cond = as.factor(rep(LETTERS[1:nrofconds],each=nrofsubs))   # create array with condition values
score = as.vector( replicate(
nrofconds , rnorm(n = nrofsubs, mean = sample(8,1)+10 , sd = sample(5,1) )
) )                                     # create array with measurement values
data.long = data.frame(subj, cond, score);      # combine arrays into a data.frame
rm(list=c("cond","nrofconds","nrofsubs","score","subj")) # delete arrays
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
geom_line    ( stat="summary", fun.y="mean",       size=2, colour="black", linetype="solid") +
geom_point   ( stat="summary", fun.y="mean",       size=2, colour="black" ) +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3 ) +
guides(colour=FALSE)
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
#geom_line    ( stat="summary", fun.y="mean",       size=2, colour="black", linetype="solid") +
#geom_point   ( stat="summary", fun.y="mean",       size=2, colour="black" ) +
stat_summary ( geom = "line", fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3 ) +
guides(colour=FALSE)
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
#geom_line    ( stat="summary", fun.y="mean",       size=2, colour="black", linetype="solid") +
#geom_point   ( stat="summary", fun.y="mean",       size=2, colour="black" ) +
stat_summary ( geom = "line", fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3 ) +
guides(colour=none)
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
#geom_line    ( stat="summary", fun.y="mean",       size=2, colour="black", linetype="solid") +
#geom_point   ( stat="summary", fun.y="mean",       size=2, colour="black" ) +
stat_summary ( geom = "line", fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3 ) +
guides(colour=FALSE)
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
#geom_line    ( stat="summary", fun.y="mean",       size=2, colour="black", linetype="solid") +
#geom_point   ( stat="summary", fun.y="mean",       size=2, colour="black" ) +
stat_summary ( geom = "line", fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3 ) +
#guides(colour=FALSE)
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
#geom_line    ( stat="summary", fun.y="mean",       size=2, colour="black", linetype="solid") +
#geom_point   ( stat="summary", fun.y="mean",       size=2, colour="black" ) +
stat_summary ( geom = "line", fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3 ) +
guides(colour="none")
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
#geom_line    ( stat="summary", fun.y="mean",       size=2, colour="black", linetype="solid") +
#geom_point   ( stat="summary", fun.y="mean",       size=2, colour="black" ) +
stat_summary ( geom = "line", fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3 ) +
guides(colour="none")
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
#geom_line    ( stat="summary", fun.y="mean",       size=2, colour="black", linetype="solid") +
#geom_point   ( stat="summary", fun.y="mean",       size=2, colour="black" ) +
stat_summary ( geom = "line", fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3 ) +
)
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
#geom_line    ( stat="summary", fun.y="mean",       size=2, colour="black", linetype="solid") +
#geom_point   ( stat="summary", fun.y="mean",       size=2, colour="black" ) +
stat_summary ( geom = "line", fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3 ))
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
stat_summary ( geom = "line",  fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3 ))
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
stat_summary ( geom = "line",  fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se",  size=1, fun.args = 2, width = 0.3 )
)
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
stat_summary ( geom = "line",  fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se",  size=1, fun.args = 2, width = 0.3 )
ggplot(data.long, aes(x=cond, y=score, group=1, colour=subj)) +
geom_point   () +
geom_line    ( linetype= "dashed", aes(group=subj) ) +
stat_summary ( geom = "line",  fun    = "mean" ,    size=2, colour="black", linetype="solid") +
stat_summary ( geom = "point", fun    = "mean" ,    size=2, colour="black") +
geom_errorbar( stat="summary", fun.data="mean_se",  size=1, fun.args = 2, width = 0.3 ) +
guides(color = "none")
set.seed(02)  # set seed
nrofcondsf1 = 3  # set number of conditions for factor 1
nrofcondsf2 = 2  # set number of conditions for factor 2
nrofsubs    = 10 # set number of subjects
# create array with subject IDs
subj = as.factor(rep(1:(nrofsubs),times=nrofcondsf1*nrofcondsf2))
# create array witht treatment conditions
treatment = as.factor(rep(LETTERS[1:nrofcondsf1],each=nrofsubs*nrofcondsf2))
# create array with control / experimental
control   = as.factor(
rep(rep(c("control","experimental"),each=nrofsubs),times=nrofcondsf1))
# create array with measurement values
score = as.vector( replicate(nrofcondsf1,
replicate(nrofcondsf2,
rnorm(n = (nrofsubs), mean = sample(14,1)+10 , sd = sample(5,1)
) ) ) )
# combine arrays into a data.frame
data.long = data.frame(subj, score, treatment, control);
# delete arrays
rm(list=c("control","nrofcondsf1","nrofcondsf2","nrofsubs", "score", "subj", "treatment"))
ggplot(data.long, aes(x=treatment, y=score, group=control, colour=control)) +
geom_point   (size=1)  +
geom_line    (linetype="dashed" ,aes(group=interaction(subj,control), alpha=.5)) +
geom_line    ( stat="summary", fun.y   ="mean",    size=1.5 )  +
geom_point   ( stat="summary", fun.y   ="mean",    size=2 ) +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3)
ggplot(data.long, aes(x=treatment, y=score, group=control, colour=control)) +
geom_point   (size=1)  +
geom_line    (linetype="dashed" ,aes(group=interaction(subj,control), alpha=.5)) +
geom_line    ( stat="summary", fun.y   ="mean",    size=1.5 )  +
geom_point   ( stat="summary", fun.y   ="mean",    size=2 ) +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3)
ggplot(data.long, aes(x=treatment, y=score, group=control, colour=control)) +
geom_point   (size=1)  +
geom_line    (linetype="dashed" ,aes(group=interaction(subj,control), alpha=.5)) +
#  geom_line    ( stat="summary", fun.y   ="mean",    size=1.5 )  +
#  geom_point   ( stat="summary", fun.y   ="mean",    size=2 ) +
stat_summary ( geom="line", fun = "mean", size=1.5) +
stat_summary ( geom="point", fun = "mean", size=2) +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3)
ggplot(data.long, aes(x=treatment, y=score, group=control, colour=control)) +
geom_point   (size=1)  +
geom_line    (linetype="dashed" ,aes(group=interaction(subj,control), alpha=.5)) +
#  geom_line    ( stat="summary", fun.y   ="mean",    size=1.5 )  +
#  geom_point   ( stat="summary", fun.y   ="mean",    size=2 ) +
stat_summary ( geom="line", fun = "mean", size=1.5) +
stat_summary ( geom="point", fun = "mean", size=2) +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3) +
guides(color="none")
guides("none")
ggplot(data.long, aes(x=treatment, y=score, group=control, colour=control)) +
geom_point   (size=1)  +
geom_line    (linetype="dashed" ,aes(group=interaction(subj,control), alpha=.5)) +
#  geom_line    ( stat="summary", fun.y   ="mean",    size=1.5 )  +
#  geom_point   ( stat="summary", fun.y   ="mean",    size=2 ) +
stat_summary ( geom="line", fun = "mean", size=1.5) +
stat_summary ( geom="point", fun = "mean", size=2) +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3) +
guides("none")
ggplot(data.long, aes(x=treatment, y=score, group=control, colour=control)) +
geom_point   (size=1)  +
geom_line    (linetype="dashed" ,aes(group=interaction(subj,control)), alpha=.5) +
#  geom_line    ( stat="summary", fun.y   ="mean",    size=1.5 )  +
#  geom_point   ( stat="summary", fun.y   ="mean",    size=2 ) +
stat_summary ( geom="line", fun = "mean", size=1.5) +
stat_summary ( geom="point", fun = "mean", size=2) +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3)
ggplot(data.long, aes(x=treatment, y=score, group=control, colour=control)) +
geom_point   (size=1)  +
geom_line    (linetype="dashed" ,aes(group=interaction(subj,control)), alpha=.5) +
stat_summary ( geom="line", fun = "mean", size=1.5) +
stat_summary ( geom="point", fun = "mean", size=2) +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3)
ggplot(data.long, aes(x=treatment, y=score, group=control, colour=control)) +
geom_point   (size=1)  +
geom_line    (linetype="dashed" ,aes(group=interaction(subj,control)), alpha=.5) +
stat_summary ( geom="line", fun = "mean", size=1.5) +
stat_summary ( geom="point", fun = "mean", size=2) +
geom_errorbar( stat="summary", fun.data="mean_se", size=1, fun.args = 2, width = 0.3)
# generate data
set.seed(05)
nrobs = 100
experience = rnorm(n = nrobs, mean = 15, sd = 3)
salary     = 10000 + ( 5 * experience ) + rnorm(n = nrobs, mean = 0, sd = 100)
data.long = data.frame(experience, salary)
# calculate correlation coefficient r
corr_coef = cor(x = data.long$experience, y = data.long$salary)
ggplot(data = data.long, aes(x = experience, y = salary)) +
geom_point() +  # plot the datapoints
# add a linear regression line with 95% confidence interval
geom_smooth(method='lm', se=TRUE, level=0.95) +
# plot the correlation coefficient into to figure
geom_text(x = 9, y = 10275, color="blue",
label = paste("r =", as.character(round(corr_coef,3))))
source("~/.active-rstudio-document", echo=TRUE)
? geom_smooth
source("~/.active-rstudio-document", echo=TRUE)
# apply linear regression and obtain regression coefficients
lin_mod = summary(lm(data = data.long, formula = salary~experience))
alpha = round(lin_mod$coefficients[1],2)
beta  = round(lin_mod$coefficients[2],2)
corr_coef = round(sqrt(lin_mod$r.squared),3)
# create figure
ggplot(data = data.long, aes(x = experience, y = salary)) +
geom_point() +  # plot the datapoints
# add a linear regression line with 95% confidence interval
geom_smooth(method='lm', formula = 'y ~ x', se=TRUE, level=0.95) +
# plot the correlation coefficient into to figure
geom_text(x = 12, y = 10275, color="blue",
label = paste("salary = ", alpha, "+", beta,"*","experience, r =",corr_coef))
# apply linear regression and obtain regression coefficients
lin_mod = summary(lm(data = data.long, formula = salary~experience))
alpha = round(lin_mod$coefficients[1],2)
beta  = round(lin_mod$coefficients[2],2)
corr_coef = round(sqrt(lin_mod$r.squared),3)
# create figure
ggplot(data = data.long, aes(x = experience, y = salary)) +
geom_point() +  # plot the datapoints
# add a linear regression line with 95% confidence interval
geom_smooth(method='lm', formula = 'y ~ x', se=TRUE, level=0.95) +
# plot the correlation coefficient into to figure
geom_text(x = 12, y = 10275, color="blue",
label = paste("salary = ", alpha, "+", beta,"*","experience, r =",corr_coef))
Sys.Date()
format.Date(Sys.Date(), "DD/MM/YYYY")
format.Date(Sys.Date(), "dd/mm/yyyy")
? format.Date()
format.Date(Sys.Date(), "%dd/%mm/%yyyy")
format.Date(Sys.Date(), "%d/%m/%y")
format.Date(Sys.Date(), "ddmmyyyy")
format.Date(Sys.Date(), "%d/%m/%Y")
format.Date(Sys.Date(), "%D/%M/%Y")
format.Date(Sys.Date(), "%D/%M/%Y")
format.Date(Sys.Date(), "%d/%m/%Y")
format.Date(Sys.Date(), "%d-%m-%Y")
format.Date(Sys.Date(), "%d %m %Y")
format.Date(Sys.Date(), "%d-%m-%Y")
? warning
message('Not all packages have installed succesfully')
tcltk::tk_messageBox(type = c('OK'), message = 'Not all packages have installed succesfully')
tcltk::tk_messageBox(type = c('ok'), message = 'Not all packages have installed succesfully')
tcltk::tk_messageBox(type = c('ok'), message = 'Not all packages have installed succesfully. Check the console for more detailed information')
