Sys.Date()
format.Date(Sys.Date(), '%d-%m-%Y')
knitr::opts_chunk$set(echo = TRUE)
out_type <- knitr::opts_knit$get("rmarkdown.pandoc.to")
set.seed(06)   # set seed
nrofsubs  = 4  # set number of subjects
nrofconds = 3  # set number of conditions
subj = rep(1:nrofsubs,nrofconds)                 # create array with subject IDs
time = rep(LETTERS[1:nrofconds],each=nrofsubs)   # create array with condition values
score = as.vector( replicate(
nrofconds , rnorm(n = nrofsubs, mean = sample(8,1)+10 , sd = sample(5,1) )
) )                                     # create array with measurement values
data.long = data.frame(subj, time, score);      # combine arrays into a data.frame
rm(list=c("nrofconds","nrofsubs","score","subj","time")) # delete arrays
# transform data from long to wide format ----
data.wide =
reshape(data = data.long        # naam van de oude dataset
,direction = 'wide'     # richting van de data-transformatie
,v.names = 'score'      # kolomnaam met de meetwaarden
,timevar = 'time'       # kolomnaam met de conditienamen
,idvar = 'subj'         # kolomnaam met de ppn-nummers
)
names(data.wide)[2:4] = c('A','B','C') # pas de kolomnamen met scores aan
# create data.bad ----
data.bad           = data.long     # kopieer data.long
data.bad[c(4,7),3] = NA            # vervang rij 4 & 7 van kolom 3 met NA
data.bad[4,2]      = NA            # vervang rij 4     van kolom 2 met NA
data.bad[2,3]      = NaN           # vervang rij 2     van kolom 3 met NaN
data.bad[9,3]      = 35.90         # vervang rij 9     van Kolom 3 met 35.90
data.bad[13,]      = data.bad[12,]  # dupliceer rij 12 in rij 13
rownames(data.bad) = NULL          # verwijder rownames
print(data.long, digits = 3, print.gap = 5, row.names = FALSE)
print(data.wide, digits = 3, print.gap = 5, row.names = FALSE)
print(data.bad, digits = 3, print.gap = 5, row.names = TRUE)
print(data.wide, digits = 3, print.gap = 5, row.names = FALSE)
print(data.long, digits = 3, print.gap = 5, row.names = FALSE)
print(data.wide, digits = 3, print.gap = 5, row.names = FALSE)
# transform data from wide to long format ----
data.long =
reshape(data        = data.wide       # naam van de oude dataset in het WIDE format
,direction  = 'long'          # richting van de data-transformatie
,varying    = c('A','B','C')  # kolomnamen die worden samengevoegd
,idvar      = 'subj'          # kolomnaam met de ppn-nummers
,v.names    = 'score'         # naam van nieuwe kolom met meetwaarden
,timevar    = 'time'          # naam van nieuwe kolom met condities
,times      = c('A','B','C')  # waardes
)
print(data.long, digits = 3, print.gap = 5, row.names = FALSE)
print(data.long, digits = 3, print.gap = 5, row.names = FALSE)
# transform data from long to wide format ----
data.wide =
reshape(data          = data.long      # naam van de oude dataset
,direction  = 'wide'         # richting van de data-transformatie
,v.names    = 'score'        # kolomnaam met de meetwaarden
,timevar    = 'time'         # kolomnaam met de conditienamen
,idvar      = 'subj'         # kolomnaam met de ppn-nummers
)
names(data.wide)[2:4] = c('A','B','C') # pas de kolomnamen met scores aan
print(data.wide, digits = 3, print.gap = 5, row.names = FALSE)
is.na(data.bad)
(naRows = which(is.na(data.bad)))
(naRows = which(is.na(data.bad$score)))
which(complete.cases(data.bad))
(incomRows = which(!complete.cases(data.bad)))
(dupRows = which(duplicated(data.bad)))
minScore = 1
maxScore = 20
(data.bad$score < minScore | data.bad$score > maxScore)
(extremeRows = which((data.bad$score < minScore | data.bad$score > maxScore)))
tempData = data.bad
(naRows = which(is.na(data.bad$score)))  # identificeer ontbrekende waardes
data.bad = data.bad[-naRows,]            # verwijder rijen
(dupRows = which(duplicated(data.bad)))  # identificeer gedupliceerde rijen
data.bad = data.bad[-dupRows,]           # verwijder rijen
(incomRows = which(!complete.cases(data.bad))) # identificeer incomplete rijen
# niets gevonden..
# identificeer scores buiten het bereik 1 t/m 20
minScore = 1
maxScore = 20
(extremeRows = which((data.bad$score < minScore | data.bad$score > maxScore)))
data.bad = data.bad[-extremeRows,]      # verwijder rijen
print(data.bad   , digits = 3, print.gap = 5, row.names = FALSE)
data.bad = tempData
(naRows = which(is.na(data.bad$score)))        # identificeer ontbrekende waardes
(dupRows = which(duplicated(data.bad)))        # identificeer gedupliceerde rijen
(incomRows = which(!complete.cases(data.bad))) # identificeer incomplete rijen
# identificeer scores buiten het bereik 1 t/m 20
minScore = 1
maxScore = 20
(extremeRows = which((data.bad$score < minScore | data.bad$score > maxScore)))
# creeer een variabele met alle unieke rijnummers die verwijderd moeten worden
(badRows = unique(c(naRows, extremeRows, dupRows)))
data.clean = data.bad[-badRows,] # verwijder alle rijen in een keer
print(data.clean   , digits = 3, print.gap = 5, row.names = FALSE)
data.bad = tempData
# BAD CODE !!
(naRows = which(is.na(data.bad$score)))        # identificeer ontbrekende waardes
(dupRows = which(duplicated(data.bad)))        # identificeer gedupliceerde rijen
(incomRows = which(!complete.cases(data.bad))) # identificeer incomplete rijen
# identificeer scores buiten het bereik 1 t/m 20
minScore = 1
maxScore = 20
(extremeRows = which((data.bad$score < minScore | data.bad$score > maxScore)))
# verwijder om de beurt de verschillende foutieve rijen
data.bad = data.bad[-naRows,]
data.bad = data.bad[-extremeRows,]
data.bad = data.bad[-dupRows]
data.bad = data.bad[-incomRows,]
# BAD CODE !!
print(data.bad   , digits = 3, print.gap = 5, row.names = TRUE)
